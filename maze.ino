/*  Welcome to  ** Robot Maze **. It might still evolve but for now it is a 2 players turn based Bomberman 
 *      
      Menu:
        To be defined
        
      CONTROLS : 
          Arrows: move your Robot
          B: drop a Bomb (for now)
          A+Left/Right: Turn the tile couter-clockwise/clockwise
          A+Up/Down: (not yet but...) Change the B button effect          
          
      Hope you'll enjoy !   
*/

//#include "maze.h" 
#include "globals.h"
#include "function.h" 
#include "robot.h"

#define NBGAMES 8

uint8_t timeUnit=5;
uint8_t test=0;

const unsigned char PROGMEM picture[] =
{
// width, height,
//128, 48,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x03, 0x03, 0x83, 0xe3, 0xe3, 0x63, 0x03, 0x03, 0x03, 0x03, 0x03, 0x87, 0xff, 0x1f, 0x07, 0x03, 0x03, 0x03, 0x83, 0xf3, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x3f, 0x3f, 0x3f, 0xbf, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xf1, 0xf1, 0xf0, 0xf0, 0xf0, 0xf8, 0xfc, 0x3c, 0x1f, 0x03, 0x00, 0x00, 0x00, 0xc0, 0x70, 0x1e, 0x0f, 0x0f, 0x05, 0x04, 0x44, 0x46, 0x46, 0x02, 0x02, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x81, 0xc0, 0xe0, 0xf0, 0xfc, 0x0e, 0x03, 0x01, 0x00, 0x00, 0x00, 0x24, 0x24, 0x26, 0x26, 0x20, 0xa0, 0xe0, 0xe0, 0x70, 0x1f, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0x3c, 0x3e, 0x3f, 0x30, 0x20, 0x00, 0x00, 0x00, 0x04, 0x04, 0x9c, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3f, 0x3f, 0x7e, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x06, 0x07, 0x0f, 0x0f, 0x07, 0x80, 0x80, 0x80, 0xc0, 0xe0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x3e, 0x3e, 0x3c, 0x3c, 0xbc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x38, 0x3c, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1e, 0x1e, 0x0e, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xf8, 0x7f, 0x4f, 0x47, 0x67, 0x63, 0x23, 0x23, 0x03, 0x03, 0x03, 0x03, 0x07, 0xc7, 0xff, 0x3f, 0x1f, 0x0f, 0x0f, 0x07, 0x83, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xff, 0x3f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x10, 0x18, 0x0f, 0x07, 0x03, 0xc3, 0xc3, 0xe3, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc1, 0xc0, 0xc0, 0xc0, 0xc4, 0xc4, 0xc4, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xff, 0xff, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xc7, 0xc7, 0xe3, 0xf3, 0xff, 0xc7, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xfe, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xeb, 0xe3, 0xff, 0xb3, 0xaf, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x9d, 0xbe, 0xbe, 0xbe, 0xc7, 0xab, 0xab, 0xa5, 0xbd, 0xcf, 0xb7, 0x97, 0xc1, 0xbf, 0x83, 0xf7, 0xfb, 0xff, 0x85, 0xff, 0xcf, 0xb7, 0xb7, 0xff, 0xff, 0xff, 0x80, 0xf9, 0xf3, 0xf9, 0x80, 0xff, 0xdf, 0xab, 0xab, 0xc7, 0xbf, 0x83, 0xf7, 0xfb, 0xff, 0xfb, 0xc1, 0xbb, 0xff, 0x85, 0xff, 0x83, 0xf7, 0xfb, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 
};
//char c=0;

void setup() { // SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  Setup SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
  arduboy.begin();
  arduboy.clear();
  arduboy.setFrameRate(60);
  
}

void loop() { // -------------------------  Init loop -------------------------------------------------------------------------
  //testP++; //for .h testing (doesn't work )
  timer++;
  //arduboy.pollButtons();  
  
  arduboy.clear(); 
  if (!(arduboy.nextFrame()))
    return;
    
  arduboy.pollButtons();    
    
  if (MENU==game){ 
    arduboy.drawChar(1,1,82,1,0,3); //ROBOT MAZE
    arduboy.drawChar(17,1,79,1,0,3);
    arduboy.drawChar(33,1,66,1,0,3);
    arduboy.drawChar(49,1,79,1,0,3);
    arduboy.drawChar(65,1,84,1,0,3);
    
    arduboy.drawChar(66,24,77,1,0,3);
    arduboy.drawChar(82,24,65,1,0,3);
    arduboy.drawChar(98,24,90,1,0,3);
    arduboy.drawChar(114,24,69,1,0,3);
    
    arduboy.setCursor(10,55);
    arduboy.print("  <-  Start ->");
    
    if (arduboy.justPressed(B_BUTTON))
    {
      game=MENU2;
      arduboy.clear();
    }    
    if (arduboy.justPressed(A_BUTTON))
    {
      arduboy.initRandomSeed();
      randomSeed((int)timer*37);
      game=cursX;
      if (MAZE==game){
        cursX=50;
        cursY=8;
        randomTiles(20, SYMETRIC, true ); //sym //border
        /*for (int i=0;i<NBTILES;i++){ inside randomTiles now
          imposeWall(i, false);
        } */ 
        movesLeft=movesInit;
      }      
    }
  }
  else if (MENU2==game){      
    arduboy.setCursor(10,10);
    arduboy.print("Difficulty : ");
    arduboy.print(difficulty);
    arduboy.setCursor(10,20);
    arduboy.print("Controls : " );
//    arduboy.print(forEmulator ? "PC":"Arduboy");
    arduboy.setCursor(0,55);
    arduboy.print("WW.Github.com/skaterced");
    arduboy.setCursor(1,40);
    arduboy.print("A: Change    B: Back");
    
    arduboy.drawChar(0,cursY*10+10,16,1,0,1);
 
  
    if (arduboy.justPressed(DOWN_BUTTON))
    {
      if (cursY<1){
        cursY++;
      }
    }
    if (arduboy.justPressed(UP_BUTTON))
    {
      if (cursY>0){
        cursY--;
      }
    }
    if (arduboy.justPressed(A_BUTTON))
    {
      switch (cursY){
        case 0:
        
          if (++difficulty==5)
            difficulty=1;
        break;
      }
      
    }
    if (arduboy.justPressed(B_BUTTON))
    {
      game=MENU;
      arduboy.clear();
    }     
  }
  
  else if (MAZE==game){  // _____________________|     |___________| Maze |___________|    |______________________________|
    //arduboy.clear();
  /* //test
  p1.score=getIndice(p1.x+leftBorder,p1.y+upBorder);
  p2.score=tiles[findInd(getIndice(p1.x+leftBorder,p1.y+upBorder))].walls;    
  inGameMenu(true, p1.score, p2.score); //"test mode" if true
  */
  inGameMenu(false, 0,0); //"test mode" if true
  
  if (0==WOB)
    arduboy.fillRect(leftBorder-2,0,84,64,1);

  for (int i=0;i<NBTILES;i++){
    tiles[i].draw();
  }
  //SelectorManagment();
  //drawSelector(getIndice(cursX,cursY));

  if (controlRobot()){ // check buttons and play robot's action
    //ticks (robot has done one action)
    if (checkBombs()){
      timer=0;
      if (0x08==(tiles[getIndice(p1.x,p1.y)].walls&0x08))
        p1.dir=69;
      if (0x08==(tiles[getIndice(p2.x,p2.y)].walls&0x08))
        p2.dir=69;
    }
  }
  if(movesLeft==0){
    movesLeft=movesInit;
    p1Playing=!p1Playing;
  }
  p1.drawBombs();
  p2.drawBombs();
  p1.draw(true, WOB);  
  p2.draw(false, WOB);    
  }
  
  else {
    arduboy.setCursor(0,0);
    arduboy.println("please recompile with");
    arduboy.println("this game included");
    arduboy.println("(#include xxx_h)");
  }
  arduboy.display();
}
