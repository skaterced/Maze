/*  Welcome to  ** Robot Maze **. It might still evolve but for now it is a 2 players turn based Bomberman 
 *      
      Menu:
        To be defined
        
      CONTROLS : 
          Arrows: move your Robot
          B: drop a Bomb (for now)
          A+Left/Right: Turn the tile couter-clockwise/clockwise
          A+Up/Down: (not yet but...) Change the B button effect          
          
      Hope you'll enjoy !   
*/

#include "menu.h" 
#include "globals.h"
#include "function.h" 
#include "robot.h"
#include "monster.h"

#define NBGAMES 8

uint8_t timeUnit=5;
uint8_t test=0;

const unsigned char PROGMEM picture[] =
{
// width, height,
//128, 48,
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x1f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x07, 0x03, 0x03, 0x03, 0x83, 0xe3, 0xe3, 0x63, 0x03, 0x03, 0x03, 0x03, 0x03, 0x87, 0xff, 0x1f, 0x07, 0x03, 0x03, 0x03, 0x83, 0xf3, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x3f, 0x3f, 0x3f, 0xbf, 0xff, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x07, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xf1, 0xf1, 0xf0, 0xf0, 0xf0, 0xf8, 0xfc, 0x3c, 0x1f, 0x03, 0x00, 0x00, 0x00, 0xc0, 0x70, 0x1e, 0x0f, 0x0f, 0x05, 0x04, 0x44, 0x46, 0x46, 0x02, 0x02, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x81, 0xc0, 0xe0, 0xf0, 0xfc, 0x0e, 0x03, 0x01, 0x00, 0x00, 0x00, 0x24, 0x24, 0x26, 0x26, 0x20, 0xa0, 0xe0, 0xe0, 0x70, 0x1f, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0x3c, 0x3e, 0x3f, 0x30, 0x20, 0x00, 0x00, 0x00, 0x04, 0x04, 0x9c, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3c, 0x3f, 0x3f, 0x7e, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x06, 0x07, 0x0f, 0x0f, 0x07, 0x80, 0x80, 0x80, 0xc0, 0xe0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3e, 0x3e, 0x3e, 0x3c, 0x3c, 0xbc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x1f, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x38, 0x3c, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1e, 0x1e, 0x0e, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xf8, 0x7f, 0x4f, 0x47, 0x67, 0x63, 0x23, 0x23, 0x03, 0x03, 0x03, 0x03, 0x07, 0xc7, 0xff, 0x3f, 0x1f, 0x0f, 0x0f, 0x07, 0x83, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xff, 0x3f, 0x07, 0x01, 0x00, 0x00, 0x00, 0x10, 0x18, 0x0f, 0x07, 0x03, 0xc3, 0xc3, 0xe3, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xc1, 0xc0, 0xc0, 0xc0, 0xc4, 0xc4, 0xc4, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xf0, 0xff, 0xff, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xc7, 0xc7, 0xe3, 0xf3, 0xff, 0xc7, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xfe, 0xf0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0xeb, 0xe3, 0xff, 0xb3, 0xaf, 0xc3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x9d, 0xbe, 0xbe, 0xbe, 0xc7, 0xab, 0xab, 0xa5, 0xbd, 0xcf, 0xb7, 0x97, 0xc1, 0xbf, 0x83, 0xf7, 0xfb, 0xff, 0x85, 0xff, 0xcf, 0xb7, 0xb7, 0xff, 0xff, 0xff, 0x80, 0xf9, 0xf3, 0xf9, 0x80, 0xff, 0xdf, 0xab, 0xab, 0xc7, 0xbf, 0x83, 0xf7, 0xfb, 0xff, 0xfb, 0xc1, 0xbb, 0xff, 0x85, 0xff, 0x83, 0xf7, 0xfb, 0x87, 0xff, 0xff, 0xff, 0xff, 0xff, 
};
//char c=0;

void setup() { // SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS  Setup SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
  arduboy.begin();
  arduboy.clear();
  arduboy.setFrameRate(60);
  arduboy.initRandomSeed();  
}

void mazeInit(void){
  cursX=50;
  cursY=8;
  randomTiles(20, SYMETRIC, true ); //sym //border
  //todo random player starts
  movesLeft=movesInit/2;
  monster.dir=0;
  monster.x=31;
  p1.init(true);
  p2.init(false);
  hold=false;
}
void loop() { // -------------------------  Init loop -------------------------------------------------------------------------

  if (!(arduboy.nextFrame()))
    return;
    
  arduboy.clear(); 
  timer++;
  arduboy.pollButtons();    
    
  if (MENU==game){
    if (mainMenu())
      mazeInit();
  }
  else if (OPTION==game){      
    optionMenu();
  }
  else if (CREDIT==game){      
    credit();
  }
  
  else if (MAZE==game){  // _____________________|     |___________| Maze |___________|    |______________________________|
    //arduboy.clear();
  /* //test
  p1.score=getIndice(p1.x+leftBorder,p1.y+upBorder);
  p2.score=tiles[findInd(getIndice(p1.x+leftBorder,p1.y+upBorder))].walls;    
  inGameMenu(true, p1.score, p2.score); //"test mode" if true
  */
  inGameMenu(false, 0,0); //"test mode" if true
  
  if (0==WOB)
    arduboy.fillRect(leftBorder-2,0,84,64,1);

  for (int i=0;i<NBTILES;i++){
    tiles[i].draw();
  }
  //SelectorManagment();
  //drawSelector(getIndice(cursX,cursY));

  if (!hold){    
    controlRobot(); // check buttons and play robot's action    
  }
  else {
    checkMoving();  
    if (timer==HOLD_THRESHOLD){ //to prevent a player to play one move too much (and use one of his opponent's move)
      hold=false;
      //ticks (robot has done one action)    
      if(--movesLeft==0){
        movesLeft=movesInit;
        p1Playing=!p1Playing;
        hold=true;
        timer+=3; //if changing turn, wait another few seconds
      }
      checkMonsterCollision();
      monster.update(); //initiate the monster movement      
      if (checkBombs()){        
        hold=true;
        if (WALL_EXPLOSION==(tiles[getIndice(monster.x,monster.y)].walls&WALL_EXPLOSION))
          monster.dir=DEAD;
        if (WALL_EXPLOSION==(tiles[getIndice(p1.x,p1.y)].walls&WALL_EXPLOSION))
          p1.dir=DEAD;
        if (WALL_EXPLOSION==(tiles[getIndice(p2.x,p2.y)].walls&WALL_EXPLOSION))
          p2.dir=DEAD;
      }
    }
    else if(timer==HOLD_THRESHOLD+1){
      monster.update(); //finish the movement
      checkMonsterCollision();
    }
    else if (timer==HOLD_THRESHOLD+10){ //bomb has finished exploding 
      if ((DEAD!=p1.dir)&&(DEAD!=p2.dir)){ //check if someone died
        hold=false;
      }
    }
    else if (timer>90){
      mazeInit();
    }
  }
  monster.draw();
  p1.drawBombs();
  p2.drawBombs();
  p1.draw(true, WOB);  
  p2.draw(false, WOB);  
  }
  
  else {
    arduboy.setCursor(0,0);
    arduboy.println("please recompile with");
    arduboy.println("this game included");
    arduboy.println("(#include xxx_h)");
  }
  arduboy.display();
}
